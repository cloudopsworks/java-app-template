##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      buildEnvironment:
        required: true
        type: string
      environment:
        required: true
        type: string
      targetName:
        required: false
        type: string
        default: ''
      isRelease:
        required: true
        type: boolean
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_STS_ROLE_ARN:
        required: false
        type: string
        default: ""

    secrets:
      BOT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

    outputs:
      has_preview:
        description: "Has Preview output"
        value: ${{ jobs.pipeline-config.outputs.has_preview }}
      pipeline_docker:
        description: "Pipeline with Docker Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_docker }}
      pipeline_sonarqube:
        description: "Pipeline with Sonarqube Analysis Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_sonarqube }}
      pipeline_dtrack:
        description: "Pipeline with DependencyTrack Analysis Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_dtrack }}
      pipeline_dtrack_project_type:
        description: "Pipeline classification for DependencyTrack Analysis, blank when dtrack is disabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_dtrack_project_type }}
      semver:
        description: "Semver Output calculated on Build"
        value: ${{ jobs.build.outputs.semver }}
      package_name:
        description: "Package Name Output calculated on Build"
        value: ${{ jobs.pipeline-config.outputs.package_name }}

jobs:
  pipeline-config:
    outputs:
      has_preview: ${{ steps.has_preview.outputs.result }} # true | false
      pipeline_docker: ${{ steps.pipeline_docker.outputs.result == 1 }} # true | false
      pipeline_sonarqube: ${{ steps.disable_sonarqube.outputs.result }} # true | false
      pipeline_dtrack: ${{ steps.disable_dtrack.outputs.result }} # true | false
      pipeline_dtrack_project_type: ${{ steps.dtrack_project_type.outputs.type }}
      package_name: ${{ steps.package_name.outputs.result }}
      exclude_globs: ${{ steps.exclude_globs.outputs.result }}
      zip_globs: ${{ steps.zip_globs.outputs.result }}
      java_version: ${{ steps.java_version.outputs.result }}
      java_dist: ${{ steps.java_dist.outputs.result }}
      java_image_variant: ${{ steps.java_image_variant.outputs.result }}
      maven_opts: ${{ steps.maven_opts.outputs.result }}
      docker_inline: ${{ steps.docker_inline.outputs.result }}
      docker_args: ${{ steps.docker_args_env.outputs.result == '' && steps.docker_args_global.outputs.result || steps.docker_args_env.outputs.result }}
      install_command: ${{ steps.install_command.outputs.result }}
      build_command: ${{ steps.build_command.outputs.result }}
      repository_name: ${{ steps.getowner.outputs.repo_name }}
      custom_run_command: ${{ steps.custom_run_command.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Get pipeline conf java version Defaults to 21
      - name: Get pipeline Java version
        id: java_version
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.java.version // "21"' ./.github/vars/inputs-global.yaml
      # Get pipeline conf java dist defaults to temurin (adopt is deprecated)
      - name: Get pipeline Java dist
        id: java_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.java.dist // "temurin"' ./.github/vars/inputs-global.yaml

      # Get pipeline conf java image variant defaults to alpine
      - name: Get pipeline Java image variant
        id: java_image_variant
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.java.image_variant // "alpine"' ./.github/vars/inputs-global.yaml

      # Get preview enabled
      - name: Get pipeline preview enabled
        id: has_preview
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.preview.enabled // "false"' ./.github/vars/inputs-global.yaml

      # Get if this is a library project
      - name: Get pipeline preview enabled
        id: is_library
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.isLibrary // "false"' ./.github/vars/inputs-global.yaml

      # Get Sonarqube Configuration is disabled
      - name: Get Pipeline conf Sonarqube is Disabled
        id: disable_sonarqube
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.sonarqube.enabled // "true"' ./.github/vars/inputs-global.yaml

      # Get DependencyTrack Configuration is disabled
      - name: Get Pipeline conf DependencyTrack is Disabled
        id: disable_dtrack
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.dependencyTrack.enabled // "true"' ./.github/vars/inputs-global.yaml

      # Get DependencyTrack project type configuration, default is null
      - name: Get Pipeline conf DependencyTrack Project type
        id: dtrack_project_type
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.dependencyTrack.type // "Application"' ./.github/vars/inputs-global.yaml

      # Get pipeline conf
      - name: Get pipeline zip packaging globs
        id: zip_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.zipGlobs[]' ./.github/cloudopsworks-ci.yaml

      # Get pipeline conf
      - name: Get pipeline zip packaging exclude globs
        id: exclude_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.excludeGlobs[] | "!" + .' ./.github/cloudopsworks-ci.yaml

      # Get the Package name from pom.xml
      - name: Get Package name
        id: package_name
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oy '.project.groupId + "." + .project.artifactId' pom.xml

      # Get from global inputs the custom Maven Options
      - name: Get Custom Install Command
        id: maven_opts
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.maven_options // ""' ./.github/vars/inputs-global.yaml

      # get from global inputs the docker inline specification as text
      - name: Get Docker Inline Setting
        id: docker_inline
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.docker_inline // ""' ./.github/vars/inputs-global.yaml

      # get from global inputs docker arguments, also as text
      - name: Get Docker Arguments
        id: docker_args_global
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.docker_args // ""' ./.github/vars/inputs-global.yaml

      # get from environmental inputs the docker arguments will override the one set on docker_args,also as text
      - name: Get Docker Arguments for ${{ inputs.environment }}
        id: docker_args_env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.docker_args // ""' ./.github/vars/inputs-${{ inputs.environment }}.yaml

      # get custom_run_command from global inputs
      - name: Get Custom Run Command
        id: custom_run_command
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.custom_run_command // ""' ./.github/vars/inputs-global.yaml

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

  build:
    needs:
      - pipeline-config
    outputs:
      semver: ${{ steps.semver.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Java JDK for builds
      - name: Set JDK
        uses: actions/setup-java@v4
        with:
          java-version: "${{ needs.pipeline-config.outputs.java_version }}"
          distribution: "${{ needs.pipeline-config.outputs.java_dist }}"
      # Cache all maven packages
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Versioning SET
      - name: Version SET
        run: make version
        env:
          GITHUB_ACTOR: ${{ inputs.BOT_USER }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Version Capture
        id: semver
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      # Build the code!
      - name: Build Code
        run: |
          MAVEN_OPTS="$MAVEN_OPTS ${{ needs.pipeline-config.outputs.maven_opts }}"
          mvn --batch-mode --update-snapshots clean package
        env:
          GITHUB_ACTOR: ${{ inputs.BOT_USER }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Deploy release to Maven Repository (defaults to Github repo)
      - name: Deploy to Maven Repo
        if: ${{ steps.is_library.outputs.result == 'true' }}
        run: |
          MAVEN_OPTS="$MAVEN_OPTS ${{ needs.pipeline-config.outputs.maven_opts }}"
          mvn --batch-mode deploy
        env:
          GITHUB_ACTOR: ${{ inputs.BOT_USER }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Perform of upload of artfiacts for java
      - name: Upload Artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: all_artifacts
          path: |
            ${{ needs.pipeline-config.outputs.zip_globs }}
            ${{ needs.pipeline-config.outputs.exclude_globs }}
          retention-days: 1
          include-hidden-files: true
          compression-level: '1' #fast

  docker-build:
    needs:
      - pipeline-config
      - build
    if: needs.pipeline-config.outputs.pipeline_docker == 'true'
    uses: cloudopsworks/base-app-template/.github/workflows/docker-build-java.yml@develop
    with:
      DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
      BOT_USER: ${{ inputs.BOT_USER }}
      BOT_EMAIL: ${{ inputs.BOT_EMAIL }}
      TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
      AWS_REGION: ${{ inputs.AWS_REGION }}
      AWS_STS_ROLE_ARN: ${{ inputs.AWS_STS_ROLE_ARN }}
      isRelease: ${{ inputs.isRelease }}
      semver: ${{ needs.build.outputs.semver }}
      repository_name: ${{ needs.pipeline-config.outputs.repository_name }}
      repository_owner: ${{ github.repository_owner }}
      docker_inline: ${{ needs.pipeline-config.outputs.docker_inline }}
      docker_args: ${{ needs.pipeline-config.outputs.docker_args }}
      java_version: ${{ needs.pipeline-config.outputs.java_version }}
      java_dist:  ${{ needs.pipeline-config.outputs.java_dist }}
      java_image_variant: ${{ needs.pipeline-config.outputs.java_image_variant }}
      custom_run_command: ${{ needs.pipeline-config.outputs.custom_run_command }}
    secrets:
      token: ${{ secrets.BOT_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AZURE_SERVICE_ID: ${{ secrets.AZURE_SERVICE_ID }}
      AZURE_SERVICE_SECRET: ${{ secrets.AZURE_SERVICE_SECRET }}
