
##
# (c) 2021 - CloudopsWorks OÃœ - https://docs.cloudops.works/
#
name: Java Maven Build
on:
  # Run only on branches PUSH except when charts are modified
  push:
    branches:
      - master
    paths-ignore:
      - ".github/workflows/**"
  workflow_dispatch:
    
# Permission Settings for the entire RUN
permissions:
  contents: write
  packages: write
  statuses: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release.outputs.release_version }}
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Java JDK for builds
      - name: Set JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v1
      # Cache all maven packages
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"
      # Get previous tags in order to proceed to generate next version
      - name: Get Previous tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        id: previoustag
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      # Generate next SEMVER number
      - name: Next Semver
        uses: WyriHaximus/github-action-next-semvers@v1
        id: semvers
        with:
          version: "${{ steps.previoustag.outputs.tag }}"
      # Create a VERSION file to use through the build
      - name: Set Version File
        id: release
        env:
          NEXT_VERSION: "${{ steps.semvers.outputs.patch }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION
          echo "::set-output name=release_version::$NEXT_VERSION"
      # Maven version set to POM.XML
      - name: Maven Version
        run: mvn --batch-mode versions:set -DnewVersion=$(cat VERSION) 
      # Build the code!
      - name: Build Code
        run: mvn --batch-mode --update-snapshots clean package
      # Proceed with helm chart versioning bump
      - name: Helm Chart Versioning
        env:
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/forward-streaming
          make tag
      # Push the changes to Git TAG before deploying anything
      - name: Release Version
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          VERSION=$(cat VERSION)
          git config --global user.name "finconecta-bot"
          git config --global user.email "finconecta-bot@4wrd.online"
          git commit -a -m "chore: release version v$VERSION"
          git tag -fa v$VERSION -m "Release Version v$VERSION"
          git push origin v$VERSION
      # Deploy release to Maven Repository (defaults to Github repo)
      - name: Deploy to Maven Repo
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #
      # Docker Build and deploy to registry
      #
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: finconectaopsclusterprod.azurecr.io
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker Push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: |
            finconectaopsclusterprod.azurecr.io/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            finconectaopsclusterprod.azurecr.io/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.release.outputs.release_version }}
      #
      # Helm Build and deploy to registry
      #
      - name: Helm Build
        env:
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/$REPOSITORY_NAME
          make release

  static-analysis:
    runs-on: ubuntu-latest
    needs:
      - build-release
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
          ref: v${{ needs.build-release.outputs.release_version }}
      # Setup Java JDK for builds
      - name: Set JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      # Build the code!
      - name: Static Test Code
        env:
          JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms128m -Xmx2048m"
          SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          mvn --batch-mode test
          mvn --batch-mode sonar:sonar -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN

  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - build-release
      - static-analysis
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"
      # Build Payload script
      - name: Build Payload params
        id: params
        run: |
          payload="{\"promote\": {"
          payload="${payload}\"repositoryowner\": \"${{ steps.getowner.outputs.owner }}\""
          payload="${payload}, \"repository\": \"${{ steps.getowner.outputs.repo_name }}\""
          payload="${payload}, \"environment\": \"staging\""
          payload="${payload}, \"version\": \"${{ needs.build-release.outputs.release_version }}\""
          payload="${payload}, \"releasename\": \"${{ steps.getowner.outputs.repo_name }}\""
          payload="${payload} } }"

          echo "::set-output name=payload::$payload"

      # Send event to repository to launch new promotion
      - name: Send Event to Environment Repository
        id: send_event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: "${{ secrets.BOT_TOKEN }}"
          repository: ${{ steps.getowner.outputs.owner }}/environment-${{ steps.getowner.outputs.owner }}-staging
          event-type: promote-environment
          client-payload: '${{ steps.params.outputs.payload }}'

